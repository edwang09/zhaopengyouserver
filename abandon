let play = card
        const startCards = decompose({playerid, card}, mainSuit, mainNumber)
        const refererCards = ROOMS[roomid].players.filter(player=>player.playerid!==playerid).map(p=>{
            const card = PLAYERS[p.playerid].handCard.filter(card=>(card.slice(0,1)===card[0].slice(0,1) && !isMain(card, mainSuit, mainNumber)))
            const decomp = decompose({playerid, card}, mainSuit, mainNumber)
            return decomp
        })
        const invalid = startCards.map(set=>refererCards.map(ref=> {
            if (set.size <= ref.size && set.tlj <=ref.tlj && set.card.slice(1) < ref.card.slice(1)){
                return set
            }
            return null
        })).filter(s=>s!==null)
        if (invalid.length){
            play = constructCard(invalid[0], mainSuit,  mainNumber)
        }



        function validdump(playerid, roomid){
    ROOMS[roomid].dumpCard.valid.push(playerid)
    if (ROOMS[roomid].dumpCard.valid.length === 5){
        const dumperid = ROOMS[roomid].dumpCard.playerid
        console.log(PLAYERS[dumperid].handCard)
        const card = ROOMS[roomid].dumpCard.card
        ROOMS[roomid].dumpCard = null
        card.map(card=>{
            const cardIndex = PLAYERS[dumperid].handCard.indexOf(card)
            if (cardIndex > -1){
                PLAYERS[dumperid].handCard = [...PLAYERS[dumperid].handCard.slice(0,cardIndex), ...PLAYERS[dumperid].handCard.slice(cardIndex+1)]
            }
        })
        const currentplayerindex = ROOMS[roomid].players.findIndex(player=>player.playerid === ROOMS[roomid].inTurn)
        verifyTickets(roomid, card, currentplayerindex)
        ROOMS[roomid].lastPlay = ROOMS[roomid].currentPlay
        ROOMS[roomid].currentPlay = [{playerid:dumperid, card}]
        const nextplayerindex = (currentplayerindex+1) % PLAYERNUMBER
        ROOMS[roomid].inTurn = ROOMS[roomid].players[nextplayerindex].playerid

        console.log(PLAYERS[dumperid].handCard)
        WSS[dumperid].send(JSON.stringify({action:"dump succeed", handCard: PLAYERS[dumperid].handCard}))
        broadcastRoom(roomid, "succeed dump")
    }
}
function invaliddump(playerid, card,  roomid){
    const dumperid = ROOMS[roomid].dumpCard.playerid
    ROOMS[roomid].dumpCard = null
    card.map(card=>{
        const cardIndex = PLAYERS[dumperid].handCard.indexOf(card)
        if (cardIndex > -1){
            PLAYERS[dumperid].handCard = [...PLAYERS[dumperid].handCard.slice(0,cardIndex), ...PLAYERS[dumperid].handCard.slice(cardIndex+1)]
        }
    })
    const currentplayerindex = ROOMS[roomid].players.findIndex(player=>player.playerid === ROOMS[roomid].inTurn)
    verifyTickets(roomid, card, currentplayerindex)
    ROOMS[roomid].lastPlay = ROOMS[roomid].currentPlay
    ROOMS[roomid].currentPlay = [{playerid:dumperid, card}]
    const nextplayerindex = (currentplayerindex+1) % PLAYERNUMBER
    ROOMS[roomid].inTurn = ROOMS[roomid].players[nextplayerindex].playerid
    WSS[dumperid].send(JSON.stringify({action:"dump failed", handCard: PLAYERS[dumperid].handCard}))
    broadcastRoom(roomid, "failed dump")
}